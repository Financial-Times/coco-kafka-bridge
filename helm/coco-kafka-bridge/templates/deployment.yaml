{{- $global := . }}
{{- /* Iterating through the defined bridges  */}}
{{- range $bridge := $global.Values.bridges }}

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ $bridge.name }} 
  labels:
    chart: "{{ $global.Chart.Name | trunc 63 }}"
    chartVersion: "{{ $global.Chart.Version | trunc 63 }}" 
    visualize: "true" 
    app: {{ $bridge.name }} 
spec:
  replicas: {{ $global.Values.replicaCount }} 
  selector: 
    matchLabels:
      app: {{ $bridge.name }}
  template:
    metadata:
      labels:
        app: {{ $bridge.name }}
        visualize: "true" 
    spec:
      containers: 
      - name: {{ $bridge.name }} 
        image: "{{ $global.Values.image.repository }}:{{ $global.Chart.Version }}"
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - mountPath: /etc/ssl/certs
          name: certificates-storage
        env: 
        - name: SERVICE_NAME
          value: "{{ $bridge.name }}"
        - name: CONSUMER_AUTOCOMMIT_ENABLE
          value: "true" 
        - name: PRODUCER_ADDRESS
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: kafka.proxy.url.with.protocol
        - name: PRODUCER_TYPE
          value: "proxy"
{{- /* we'll be using the value of the publishing cluster if the kafkaProxyUrl is not set on the bridge */}}
{{- $proxyUrlValue := default $bridge.kafkaProxyUrl $global.Values.cluster.publishing.url }}
        - name: QUEUE_PROXY_ADDRS
          value: "{{ $proxyUrlValue }}/__kafka-rest-proxy"
        - name: GROUP_ID
          value: {{ $bridge.groupIdPrefix }}-{{ template "env-full-name" $global }}
        - name: TOPIC
          value: "{{ $bridge.topic }}"
        - name: AUTHORIZATION_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ $bridge.authSecretName }}"
              key: "{{ $bridge.authSecretKey }}"
        ports: 
        - containerPort: 8080 
        livenessProbe: 
          tcpSocket: 
            port: 8080 
          initialDelaySeconds: 5
        readinessProbe: 
          httpGet: 
            path: "/__gtg" 
            port: 8080 
          initialDelaySeconds: 10
          periodSeconds: 30 
        resources: 
{{ toYaml $global.Values.resources | indent 12 }}
      volumes:
      - name: certificates-storage
        hostPath:
          path: /usr/share/ca-certificates
{{- end }}
